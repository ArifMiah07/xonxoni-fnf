import { useState, useEffect, useCallback, useMemo } from 'react';

const CELL_SIZE = 20;
const SPEED_LEVELS = {
  EASY: 150,
  MEDIUM: 100,
  HARD: 50,
};

const FOOD_TYPES = {
  NORMAL: { color: 'bg-red-500', points: 1 },
  BONUS: { color: 'bg-yellow-500', points: 3 },
  SUPER: { color: 'bg-purple-500', points: 5 },
};

const POWER_UPS = {
  SPEED: { color: 'bg-blue-500', duration: 5000, effect: 'Temporary Speed Boost' },
  SHRINK: { color: 'bg-green-500', duration: 5000, effect: 'Shrink Snake' },
};

// Static list of flag emojis
const FLAGS = {
    AF: 'ðŸ‡¦ðŸ‡« Afghanistan',
    AL: 'ðŸ‡¦ðŸ‡± Albania',
    DZ: 'ðŸ‡©ðŸ‡¿ Algeria',
    AS: 'ðŸ‡¦ðŸ‡¸ American Samoa',
    AD: 'ðŸ‡¦ðŸ‡© Andorra',
    AO: 'ðŸ‡¦ðŸ‡´ Angola',
    AI: 'ðŸ‡¦ðŸ‡® Anguilla',
    AG: 'ðŸ‡¦ðŸ‡¬ Antigua and Barbuda',
    AR: 'ðŸ‡¦ðŸ‡· Argentina',
    AM: 'ðŸ‡¦ðŸ‡² Armenia',
    AW: 'ðŸ‡¦ðŸ‡¼ Aruba',
    AU: 'ðŸ‡¦ðŸ‡º Australia',
    AT: 'ðŸ‡¦ðŸ‡¹ Austria',
    AZ: 'ðŸ‡¦ðŸ‡¿ Azerbaijan',
    BS: 'ðŸ‡§ðŸ‡¸ Bahamas',
    BH: 'ðŸ‡§ðŸ‡­ Bahrain',
    BD: 'ðŸ‡§ðŸ‡© Bangladesh',
    BB: 'ðŸ‡§ðŸ‡§ Barbados',
    BY: 'ðŸ‡§ðŸ‡¾ Belarus',
    BE: 'ðŸ‡§ðŸ‡ª Belgium',
    BZ: 'ðŸ‡§ðŸ‡¿ Belize',
    BJ: 'ðŸ‡§ðŸ‡¯ Benin',
    BM: 'ðŸ‡§ðŸ‡² Bermuda',
    BT: 'ðŸ‡§ðŸ‡¹ Bhutan',
    BO: 'ðŸ‡§ðŸ‡´ Bolivia',
    BA: 'ðŸ‡§ðŸ‡¦ Bosnia and Herzegovina',
    BW: 'ðŸ‡§ðŸ‡¼ Botswana',
    BR: 'ðŸ‡§ðŸ‡· Brazil',
    BN: 'ðŸ‡§ðŸ‡³ Brunei',
    BG: 'ðŸ‡§ðŸ‡¬ Bulgaria',
    BF: 'ðŸ‡§ðŸ‡« Burkina Faso',
    BI: 'ðŸ‡§ðŸ‡® Burundi',
    KH: 'ðŸ‡°ðŸ‡­ Cambodia',
    CM: 'ðŸ‡¨ðŸ‡² Cameroon',
    CA: 'ðŸ‡¨ðŸ‡¦ Canada',
    CV: 'ðŸ‡¨ðŸ‡» Cape Verde',
    KY: 'ðŸ‡°ðŸ‡¾ Cayman Islands',
    CF: 'ðŸ‡¨ðŸ‡« Central African Republic',
    TD: 'ðŸ‡¹ðŸ‡© Chad',
    CL: 'ðŸ‡¨ðŸ‡± Chile',
    CN: 'ðŸ‡¨ðŸ‡³ China',
    CO: 'ðŸ‡¨ðŸ‡´ Colombia',
    KM: 'ðŸ‡°ðŸ‡² Comoros',
    CG: 'ðŸ‡¨ðŸ‡¬ Congo',
    CD: 'ðŸ‡¨ðŸ‡© Congo, Democratic Republic of the',
    CK: 'ðŸ‡¨ðŸ‡° Cook Islands',
    CR: 'ðŸ‡¨ðŸ‡· Costa Rica',
    CI: 'ðŸ‡¨ðŸ‡® CÃ´te d Ivoire',
    HR: 'ðŸ‡­ðŸ‡· Croatia',
    CU: 'ðŸ‡¨ðŸ‡º Cuba',
    CW: 'ðŸ‡¨ðŸ‡¼ CuraÃ§ao',
    CY: 'ðŸ‡¨ðŸ‡¾ Cyprus',
    CZ: 'ðŸ‡¨ðŸ‡¿ Czechia',
    DK: 'ðŸ‡©ðŸ‡° Denmark',
    DJ: 'ðŸ‡©ðŸ‡¯ Djibouti',
    DM: 'ðŸ‡©ðŸ‡² Dominica',
    DO: 'ðŸ‡©ðŸ‡´ Dominican Republic',
    EC: 'ðŸ‡ªðŸ‡¨ Ecuador',
    EG: 'ðŸ‡ªðŸ‡¬ Egypt',
    SV: 'ðŸ‡¸ðŸ‡» El Salvador',
    GQ: 'ðŸ‡²ðŸ‡¦ Equatorial Guinea',
    ER: 'ðŸ‡ªðŸ‡· Eritrea',
    EE: 'ðŸ‡ªðŸ‡ª Estonia',
    ET: 'ðŸ‡ªðŸ‡¹ Ethiopia',
    FK: 'ðŸ‡«ðŸ‡° Falkland Islands',
    FO: 'ðŸ‡«ðŸ‡´ Faroe Islands',
    FJ: 'ðŸ‡«ðŸ‡¯ Fiji',
    FI: 'ðŸ‡«ðŸ‡® Finland',
    FR: 'ðŸ‡«ðŸ‡· France',
    GF: 'ðŸ‡¬ðŸ‡« French Guiana',
    PF: 'ðŸ‡µðŸ‡« French Polynesia',
    GA: 'ðŸ‡¬ðŸ‡¦ Gabon',
    GM: 'ðŸ‡¬ðŸ‡² Gambia',
    GE: 'ðŸ‡¬ðŸ‡ª Georgia',
    DE: 'ðŸ‡©ðŸ‡ª Germany',
    GH: 'ðŸ‡¬ðŸ‡­ Ghana',
    GI: 'ðŸ‡¬ðŸ‡® Gibraltar',
    GR: 'ðŸ‡¬ðŸ‡· Greece',
    GL: 'ðŸ‡¬ðŸ‡± Greenland',
    GD: 'ðŸ‡¬ðŸ‡© Grenada',
    GP: 'ðŸ‡¬ðŸ‡µ Guadeloupe',
    GU: 'ðŸ‡¬ðŸ‡º Guam',
    GT: 'ðŸ‡²ðŸ‡½ Guatemala',
    GG: 'ðŸ‡¬ðŸ‡¬ Guernsey',
    GN: 'ðŸ‡¬ðŸ‡³ Guinea',
    GW: 'ðŸ‡¬ðŸ‡¼ Guinea-Bissau',
    GY: 'ðŸ‡¬ðŸ‡¾ Guyana',
    HT: 'ðŸ‡­ðŸ‡¹ Haiti',
    HN: 'ðŸ‡­ðŸ‡³ Honduras',
    HK: 'ðŸ‡­ðŸ‡° Hong Kong',
    HU: 'ðŸ‡­ðŸ‡º Hungary',
    IS: 'ðŸ‡®ðŸ‡¸ Iceland',
    IN: 'ðŸ‡®ðŸ‡³ India',
    ID: 'ðŸ‡®ðŸ‡© Indonesia',
    IR: 'ðŸ‡®ðŸ‡· Iran',
    IQ: 'ðŸ‡®ðŸ‡¶ Iraq',
    IE: 'ðŸ‡®ðŸ‡ª Ireland',
    IM: 'ðŸ‡®ðŸ‡² Isle of Man',
    IL: 'ðŸ‡®ðŸ‡± Israel',
    IT: 'ðŸ‡®ðŸ‡¹ Italy',
    JM: 'ðŸ‡¯ðŸ‡² Jamaica',
    JP: 'ðŸ‡¯ðŸ‡µ Japan',
    JE: 'ðŸ‡¯ðŸ‡ª Jersey',
    JO: 'ðŸ‡¯ðŸ‡´ Jordan',
    KZ: 'ðŸ‡°ðŸ‡¿ Kazakhstan',
    KE: 'ðŸ‡°ðŸ‡ª Kenya',
    KI: 'ðŸ‡°ðŸ‡® Kiribati',
    KP: 'ðŸ‡°ðŸ‡µ North Korea',
    KR: 'ðŸ‡°ðŸ‡· South Korea',
    KW: 'ðŸ‡°ðŸ‡¼ Kuwait',
    KG: 'ðŸ‡°ðŸ‡¬ Kyrgyzstan',
    LA: 'ðŸ‡±ðŸ‡¦ Laos',
    LV: 'ðŸ‡±ðŸ‡» Latvia',
    LB: 'ðŸ‡±ðŸ‡§ Lebanon',
    LC: 'ðŸ‡±ðŸ‡¨ Saint Lucia',
    LI: 'ðŸ‡±ðŸ‡® Liechtenstein',
    LK: 'ðŸ‡±ðŸ‡° Sri Lanka',
    LS: 'ðŸ‡±ðŸ‡¸ Lesotho',
    LR: 'ðŸ‡±ðŸ‡· Liberia',
    LY: 'ðŸ‡±ðŸ‡¾ Libya',
    LT: 'ðŸ‡±ðŸ‡¹ Lithuania',
    LU: 'ðŸ‡±ðŸ‡º Luxembourg',
    MO: 'ðŸ‡²ðŸ‡´ Macau',
    MG: 'ðŸ‡²ðŸ‡¬ Madagascar',
    MW: 'ðŸ‡²ðŸ‡¼ Malawi',
    MY: 'ðŸ‡²ðŸ‡¾ Malaysia',
    MV: 'ðŸ‡²ðŸ‡» Maldives',
    ML: 'ðŸ‡²ðŸ‡± Mali',
    MT: 'ðŸ‡²ðŸ‡¹ Malta',
    MH: 'ðŸ‡²ðŸ‡­ Marshall Islands',
    MQ: 'ðŸ‡²ðŸ‡¶ Martinique',
    MR: 'ðŸ‡²ðŸ‡· Mauritania',
    MU: 'ðŸ‡²ðŸ‡º Mauritius',
    YT: 'ðŸ‡²ðŸ‡¶ Mayotte',
    MX: 'ðŸ‡²ðŸ‡½ Mexico',
    FM: 'ðŸ‡«ðŸ‡² Micronesia',
    MD: 'ðŸ‡²ðŸ‡© Moldova',
    MC: 'ðŸ‡²ðŸ‡¨ Monaco',
    MN: 'ðŸ‡²ðŸ‡³ Mongolia',
    ME: 'ðŸ‡²ðŸ‡ª Montenegro',
    MS: 'ðŸ‡²ðŸ‡¸ Montserrat',
    MA: 'ðŸ‡²ðŸ‡¦ Morocco',
    MZ: 'ðŸ‡²ðŸ‡¿ Mozambique',
    MM: 'ðŸ‡²ðŸ‡² Myanmar',
    NA: 'ðŸ‡³ðŸ‡¦ Namibia',
    NR: 'ðŸ‡³ðŸ‡· Nauru',
    NP: 'ðŸ‡³ðŸ‡µ Nepal',
    NL: 'ðŸ‡³ðŸ‡± Netherlands',
    NC: 'ðŸ‡³ðŸ‡¨ New Caledonia',
    NZ: 'ðŸ‡³ðŸ‡¿ New Zealand',
    NI: 'ðŸ‡³ðŸ‡® Nicaragua',
    NE: 'ðŸ‡³ðŸ‡ª Niger',
    NG: 'ðŸ‡³ðŸ‡¬ Nigeria',
    NU: 'ðŸ‡³ðŸ‡º Niue',
    NF: 'ðŸ‡³ðŸ‡« Norfolk Island',
    MP: 'ðŸ‡²ðŸ‡µ Northern Mariana Islands',
    NO: 'ðŸ‡³ðŸ‡´ Norway',
    OM: 'ðŸ‡´ðŸ‡² Oman',
    PK: 'ðŸ‡µðŸ‡° Pakistan',
    PW: 'ðŸ‡µðŸ‡¼ Palau',
    PS: 'ðŸ‡µðŸ‡¸ Palestine',
    PA: 'ðŸ‡µðŸ‡¦ Panama',
    PG: 'ðŸ‡µðŸ‡¬ Papua New Guinea',
    PY: 'ðŸ‡µðŸ‡¾ Paraguay',
    PE: 'ðŸ‡µðŸ‡ª Peru',
    PH: 'ðŸ‡µðŸ‡­ Philippines',
    PN: 'ðŸ‡µðŸ‡³ Pitcairn Islands',
    PL: 'ðŸ‡µðŸ‡± Poland',
    PT: 'ðŸ‡µðŸ‡¹ Portugal',
    PR: 'ðŸ‡µðŸ‡· Puerto Rico',
    QA: 'ðŸ‡¶ðŸ‡¦ Qatar',
    RE: 'ðŸ‡·ðŸ‡ª RÃ©union',
    RO: 'ðŸ‡·ðŸ‡´ Romania',
    RU: 'ðŸ‡·ðŸ‡º Russia',
    RW: 'ðŸ‡·ðŸ‡¼ Rwanda',
    SH: 'ðŸ‡±ðŸ‡¸ Saint Helena',
    KN: 'ðŸ‡°ðŸ‡³ Saint Kitts and Nevis',
    PM: 'ðŸ‡µðŸ‡² Saint Pierre and Miquelon',
    VC: 'ðŸ‡»ðŸ‡¨ Saint Vincent and the Grenadines',
    WS: 'ðŸ‡¼ðŸ‡¸ Samoa',
    SM: 'ðŸ‡¸ðŸ‡² San Marino',
    ST: 'ðŸ‡²ðŸ‡± SÃ£o TomÃ© and PrÃ­ncipe',
    SA: 'ðŸ‡¸ðŸ‡¦ Saudi Arabia',
    SN: 'ðŸ‡¸ðŸ‡³ Senegal',
    RS: 'ðŸ‡·ðŸ‡¸ Serbia',
    SC: 'ðŸ‡²ðŸ‡¸ Seychelles',
    SL: 'ðŸ‡¸ðŸ‡± Sierra Leone',
    SG: 'ðŸ‡¸ðŸ‡¬ Singapore',
    SX: 'ðŸ‡¸ðŸ‡½ Sint Maarten',
    SK: 'ðŸ‡¸ðŸ‡° Slovakia',
    SI: 'ðŸ‡¸ðŸ‡® Slovenia',
    SB: 'ðŸ‡¸ðŸ‡§ Solomon Islands',
    SO: 'ðŸ‡²ðŸ‡½ Somalia',
    ZA: 'ðŸ‡¿ðŸ‡¦ South Africa',
    SS: 'ðŸ‡¸ðŸ‡¸ South Sudan',
    ES: 'ðŸ‡ªðŸ‡¸ Spain',
    SD: 'ðŸ‡¸ðŸ‡© Sudan',
    SR: 'ðŸ‡±ðŸ‡° Suriname',
    SJ: 'ðŸ‡¯ðŸ‡² Svalbard and Jan Mayen',
    SE: 'ðŸ‡¸ðŸ‡ª Sweden',
    CH: 'ðŸ‡¨ðŸ‡­ Switzerland',
    SY: 'ðŸ‡¸ðŸ‡¾ Syria',
    TW: 'ðŸ‡¹ðŸ‡¼ Taiwan',
    TJ: 'ðŸ‡¹ðŸ‡¯ Tajikistan',
    TZ: 'ðŸ‡¹ðŸ‡¿ Tanzania',
    TH: 'ðŸ‡¹ðŸ‡­ Thailand',
    TL: 'ðŸ‡¹ðŸ‡± Timor-Leste',
    TG: 'ðŸ‡¹ðŸ‡¬ Togo',
    TK: 'ðŸ‡¹ðŸ‡° Tokelau',
    TO: 'ðŸ‡¹ðŸ‡´ Tonga',
    TT: 'ðŸ‡¹ðŸ‡¹ Trinidad and Tobago',
    TV: 'ðŸ‡¹ðŸ‡» Tuvalu',
    UG: 'ðŸ‡ºðŸ‡¬ Uganda',
    UA: 'ðŸ‡ºðŸ‡¦ Ukraine',
    AE: 'ðŸ‡¦ðŸ‡ª United Arab Emirates',
    GB: 'ðŸ‡¬ðŸ‡§ United Kingdom',
    US: 'ðŸ‡ºðŸ‡¸ United States',
    UY: 'ðŸ‡ºðŸ‡¾ Uruguay',
    UZ: 'ðŸ‡ºðŸ‡¿ Uzbekistan',
    VU: 'ðŸ‡»ðŸ‡º Vanuatu',
    VA: 'ðŸ‡»ðŸ‡¦ Vatican City',
    VE: 'ðŸ‡»ðŸ‡ª Venezuela',
    VN: 'ðŸ‡»ðŸ‡³ Vietnam',
    WF: 'ðŸ‡¼ðŸ‡« Wallis and Futuna',
    EH: 'ðŸ‡ªðŸ‡­ Western Sahara',
    YE: 'ðŸ‡¾ðŸ‡ª Yemen',
    ZM: 'ðŸ‡¿ðŸ‡² Zambia',
    ZW: 'ðŸ‡¿ðŸ‡¼ Zimbabwe'
  };
  

const SnakeGame = () => {
  const [gridSize, setGridSize] = useState(20);
  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);
  const [food, setFood] = useState({ x: 15, y: 15, type: 'NORMAL', flag: FLAGS.US });
  const [powerUp, setPowerUp] = useState(null);
  const [direction, setDirection] = useState('RIGHT');
  const [gameOver, setGameOver] = useState(false);
  const [score, setScore] = useState(0);
  const [highScore, setHighScore] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [difficulty, setDifficulty] = useState('MEDIUM');
  const [activePowerUp, setActivePowerUp] = useState(null);
  const [leaderboard, setLeaderboard] = useState([]);

  useEffect(() => {
    const storedHighScore = localStorage.getItem('snakeHighScore');
    if (storedHighScore) setHighScore(parseInt(storedHighScore, 10));
    const storedLeaderboard = localStorage.getItem('snakeLeaderboard');
    if (storedLeaderboard) setLeaderboard(JSON.parse(storedLeaderboard));
  }, []);

  const moveSnake = useCallback(() => {
    if (gameOver || !isPlaying) return;

    setSnake((prevSnake) => {
      const newSnake = [...prevSnake];
      const head = { ...newSnake[0] };

      switch (direction) {
        case 'UP':
          head.y = (head.y - 1 + gridSize) % gridSize;
          break;
        case 'DOWN':
          head.y = (head.y + 1) % gridSize;
          break;
        case 'LEFT':
          head.x = (head.x - 1 + gridSize) % gridSize;
          break;
        case 'RIGHT':
          head.x = (head.x + 1) % gridSize;
          break;
      }

      newSnake.unshift(head);

      if (head.x === food.x && head.y === food.y) {
        setScore((prevScore) => prevScore + FOOD_TYPES[food.type].points);
        setFood(generateFood(newSnake));
        // console.log('Eat sound effect');
      } else {
        newSnake.pop();
      }

      if (powerUp && head.x === powerUp.x && head.y === powerUp.y) {
        activatePowerUp(powerUp.type);
        setPowerUp(null);
      }

      return newSnake;
    });
  }, [direction, food, gameOver, isPlaying, gridSize, powerUp]);

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (!isPlaying) return;
      
      switch (e.key) {
        case 'ArrowUp':
          setDirection((prev) => prev !== 'DOWN' ? 'UP' : prev);
          break;
        case 'ArrowDown':
          setDirection((prev) => prev !== 'UP' ? 'DOWN' : prev);
          break;
        case 'ArrowLeft':
          setDirection((prev) => prev !== 'RIGHT' ? 'LEFT' : prev);
          break;
        case 'ArrowRight':
          setDirection((prev) => prev !== 'LEFT' ? 'RIGHT' : prev);
          break;
      }
    };

    document.addEventListener('keydown', handleKeyPress);

    return () => {
      document.removeEventListener('keydown', handleKeyPress);
    };
  }, [isPlaying]);

  useEffect(() => {
    const gameLoop = setInterval(moveSnake, activePowerUp === 'SPEED' ? SPEED_LEVELS[difficulty] / 2 : SPEED_LEVELS[difficulty]);

    return () => clearInterval(gameLoop);
  }, [moveSnake, difficulty, activePowerUp]);

  useEffect(() => {
    checkCollision();
  }, [snake]);

  const generateFood = useCallback((currentSnake) => {
    const newFood = {
      x: Math.floor(Math.random() * gridSize),
      y: Math.floor(Math.random() * gridSize),
      type: Math.random() < 0.7 ? 'NORMAL' : (Math.random() < 0.9 ? 'BONUS' : 'SUPER'),
      flag: Object.values(FLAGS)[Math.floor(Math.random() * Object.values(FLAGS).length)],
    };
    if (currentSnake.some(segment => segment.x === newFood.x && segment.y === newFood.y)) {
      return generateFood(currentSnake);
    }
    return newFood;
  }, [gridSize]);

  const generatePowerUp = useCallback(() => {
    const types = Object.keys(POWER_UPS);
    const type = types[Math.floor(Math.random() * types.length)];
    return {
      x: Math.floor(Math.random() * gridSize),
      y: Math.floor(Math.random() * gridSize),
      type,
    };
  }, [gridSize]);

  const activatePowerUp = useCallback((type) => {
    setActivePowerUp(type);
    if (type === 'SHRINK') {
      setSnake(prevSnake => prevSnake.slice(0, Math.max(3, prevSnake.length - 3)));
    }
    setTimeout(() => {
      setActivePowerUp(null);
    }, POWER_UPS[type].duration);
  }, []);

  const checkCollision = useCallback(() => {
    const head = snake[0];
    if (snake.slice(1).some((segment) => segment.x === head.x && segment.y === head.y)) {
      setGameOver(true);
      setIsPlaying(false);
      // console.log('Game over sound effect');
      if (score > highScore) {
        setHighScore(score);
        localStorage.setItem('snakeHighScore', score.toString());
      }
      updateLeaderboard();
    }
  }, [snake, score, highScore]);

  const updateLeaderboard = useCallback(() => {
    const newLeaderboard = [...leaderboard, { score, date: new Date().toLocaleDateString() }]
      .sort((a, b) => b.score - a.score)
      .slice(0, 5);
    setLeaderboard(newLeaderboard);
    localStorage.setItem('snakeLeaderboard', JSON.stringify(newLeaderboard));
  }, [leaderboard, score]);

  const resetGame = useCallback(() => {
    setSnake([{ x: Math.floor(gridSize / 2), y: Math.floor(gridSize / 2) }]);
    setFood(generateFood([{ x: Math.floor(gridSize / 2), y: Math.floor(gridSize / 2) }]));
    setPowerUp(null);
    setDirection('RIGHT');
    setGameOver(false);
    setScore(0);
    setIsPlaying(true);
    setActivePowerUp(null);
  }, [gridSize, generateFood]);

  const startGame = useCallback(() => {
    resetGame();
    setIsPlaying(true);
  }, [resetGame]);

  useEffect(() => {
    if (isPlaying && !powerUp && Math.random() < 0.01) {
      setPowerUp(generatePowerUp());
    }
  }, [isPlaying, powerUp, generatePowerUp]);

  const gameBoard = useMemo(() => (
    <div
      className="relative bg-white border border-gray-300"
      style={{ width: gridSize * CELL_SIZE, height: gridSize * CELL_SIZE }}
    >
      {snake.map((segment, index) => (
        <div
          key={index}
          className="absolute bg-green-500"
          style={{
            left: segment.x * CELL_SIZE,
            top: segment.y * CELL_SIZE,
            width: CELL_SIZE,
            height: CELL_SIZE,
          }}
        />
      ))}
      <div
        className={`absolute ${FOOD_TYPES[food.type].color}`}
        style={{
          left: food.x * CELL_SIZE,
          top: food.y * CELL_SIZE,
          width: CELL_SIZE,
          height: CELL_SIZE,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          fontSize: `${CELL_SIZE}px`, // Adjust font size to fit the cell
        }}
      >
        {food.flag}
      </div>
      {powerUp && (
        <div
          className={`absolute ${POWER_UPS[powerUp.type].color} transition-all duration-100 ease-linear`}
          style={{
            left: powerUp.x * CELL_SIZE,
            top: powerUp.y * CELL_SIZE,
            width: CELL_SIZE,
            height: CELL_SIZE,
          }}
        />
      )}
    </div>
  ), [snake, food, powerUp, gridSize]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-4xl font-bold mb-4">Snake Game</h1>
      {!isPlaying && !gameOver && (
        <div className="mb-4">
          <h2 className="text-2xl font-bold mb-2">Start Game</h2>
          <div className="mb-2">
            <label className="mr-2">Grid Size:</label>
            <input
              type="number"
              value={gridSize}
              onChange={(e) => setGridSize(Math.max(10, Math.min(50, parseInt(e.target.value, 10))))}
              className="border p-1"
            />
          </div>
          <div className="mb-2">
            <label className="mr-2">Difficulty:</label>
            <select
              value={difficulty}
              onChange={(e) => setDifficulty(e.target.value)}
              className="border p-1"
            >
              <option value="EASY">Easy</option>
              <option value="MEDIUM">Medium</option>
              <option value="HARD">Hard</option>
            </select>
          </div>
          <button
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            onClick={startGame}
          >
            Start Game
          </button>
        </div>
      )}
      {isPlaying && (
        <>
          <div className="mb-4">
            <span className="mr-4">Score: {score}</span>
            <span>High Score: {highScore}</span>
          </div>
          {activePowerUp && (
            <div className="mb-2">
              Active Power-up: {POWER_UPS[activePowerUp].effect}
            </div>
          )}
          {gameBoard}
        </>
      )}
      {gameOver && (
        <div className="mt-4">
          <h2 className="text-2xl font-bold mb-2">Game Over!</h2>
          <p className="mb-2">Your Score: {score}</p>
          <button
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 mb-4"
            onClick={resetGame}
          >
            Play Again
          </button>
          <h3 className="text-xl font-bold mb-2">Leaderboard</h3>
          <ul>
            {leaderboard.map((entry, index) => (
              <li key={index}>
                {index + 1}. Score: {entry.score} - Date: {entry.date}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default SnakeGame;
